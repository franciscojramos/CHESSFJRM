namespace ChessLOGIC
{
    public class Position
    {
        public int Row { get; }

        public int Column { get; }

        public Position(int row, int column)
        {
           Row = row;
           Column = column;
        }

        public Position(int row) => Row = row;

        public  Player SquareColor() //For know if the possition is black or white 
        {
            if ((Row + Column ) % 2 == 0)
            {
                return Player.White;
            }

            return Player.Black;
        }
        //All of this is generated by visual , is for compare , is call Equals and GetHashCode
        public override bool Equals(object obj)
        {
            return obj is Position position &&
                   Row == position.Row &&
                   Column == position.Column;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(Row, Column);
        }

        public static bool operator ==(Position left, Position right)
        {
            return EqualityComparer<Position>.Default.Equals(left, right);
        }

        public static bool operator !=(Position left, Position right)
        {
            return !(left == right);
        }
       
        //for new pos , having the actual position + the new position
        public static Position operator +(Position pos, Direction dir)
        {
            return new Position (pos.Row + dir.RowValue, pos.Column + dir.ColumnValue);
        }
    }
}
